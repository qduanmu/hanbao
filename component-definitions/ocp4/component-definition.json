{
  "component-definition": {
    "uuid": "604b27dd-c76d-4615-a921-499c676705f2",
    "metadata": {
      "title": "Component definition for ocp4",
      "last-modified": "2025-01-08T18:02:46.723222+08:00",
      "version": "1.0",
      "oscal-version": "1.1.2"
    },
    "components": [
      {
        "uuid": "f819c115-c257-4d50-b3c1-83c6408ee116",
        "type": "service",
        "title": "ocp4",
        "description": "Red Hat OpenShift Container Platform 4",
        "props": [
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "accounts_restrict_service_account_tokens",
            "remarks": "rule_set_00"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Service accounts tokens should not be mounted in pods except where the workload running in the pod explicitly needs to communicate with the API server. To ensure pods do not automatically mount tokens, set <tt>automountServiceAccountToken</tt> to <tt>false</tt>.",
            "remarks": "rule_set_00"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "accounts_unique_service_account",
            "remarks": "rule_set_001"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Using the <tt>default</tt> service account prevents accurate application rights review and audit tracing. Instead of <tt>default</tt>, create a new and unique service account with the following command: <pre>$ oc create sa <i>service_account_name</i></pre> where <i>service_account_name</i> is the name of a service account that is needed in the project namespace.",
            "remarks": "rule_set_001"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_admission_control_plugin_alwaysadmit",
            "remarks": "rule_set_002"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure OpenShift only responses to requests explicitly allowed by the admission control plugin. Check that the <code>config</code> ConfigMap object does not contain the AlwaysAdmit plugin.",
            "remarks": "rule_set_002"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_admission_control_plugin_alwayspullimages",
            "remarks": "rule_set_003"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The <tt>AlwaysPullImages</tt> admission control plugin should be disabled, since it can introduce new failure modes for control plane components if an image registry is unreachable.",
            "remarks": "rule_set_003"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_admission_control_plugin_namespacelifecycle",
            "remarks": "rule_set_004"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "OpenShift enables the <tt>NamespaceLifecycle</tt> plugin by default.",
            "remarks": "rule_set_004"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_admission_control_plugin_noderestriction",
            "remarks": "rule_set_005"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To limit the <tt>Node</tt> and <tt>Pod</tt> objects that a kubelet could modify, ensure that the <tt>NodeRestriction</tt> plugin on kubelets is enabled in the api-server configuration by running the following command: <pre>$ oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data.\"config.yaml\"' | jq '.apiServerArguments.\"enable-admission-plugins\"'</pre>",
            "remarks": "rule_set_005"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_admission_control_plugin_scc",
            "remarks": "rule_set_006"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure pod permissions are managed, make sure that the <tt>SecurityContextConstraint</tt> admission control plugin is used.",
            "remarks": "rule_set_006"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_admission_control_plugin_service_account",
            "remarks": "rule_set_007"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure <tt>ServiceAccount</tt> objects must be created and granted before pod creation is allowed, follow the documentation and create <tt>ServiceAccount</tt> objects as per your environment. Ensure that the plugin is enabled in the api-server configuration: <pre>$ oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data.\"config.yaml\"' | jq '.apiServerArguments.\"enable-admission-plugins\"'</pre>",
            "remarks": "rule_set_007"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_anonymous_auth",
            "remarks": "rule_set_008"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "By default, anonymous access to the OpenShift API is enabled, but at the same time, all requests must be authorized. If no authentication mechanism is used, the request is assigned the <tt>system:anonymous</tt> virtual user and the <tt>system:unauthenticated</tt> virtual group. This allows the authorization layer to determine which requests, if any, is an anonymous user authorized to make. To verify the authorization rules for anonymous requests run the following: <pre>$ oc describe clusterrolebindings</pre> and inspect the bindings of the <tt>system:anonymous</tt> virtual user and the <tt>system:unauthenticated</tt> virtual group. To test that an anonymous request is authorized to access the <tt>readyz</tt> endpoint, run: <pre>$ oc get --as=\"system:anonymous\" --raw='/readyz?verbose'</pre> In contrast, a request to list all projects should not be authorized: <pre>$ oc get --as=\"system:anonymous\" projects</pre>",
            "remarks": "rule_set_008"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_audit_log_maxbackup",
            "remarks": "rule_set_009"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To configure how many rotations of audit logs are retained, edit the <tt>openshift-kube-apiserver</tt> configmap and set the <tt>audit-log-maxbackup</tt> parameter to <tt>10</tt> or to an organizationally appropriate value: <pre> \"apiServerArguments\":{ ... \"audit-log-maxbackup\": [10], ... </pre>",
            "remarks": "rule_set_009"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_audit_log_maxsize",
            "remarks": "rule_set_010"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To rotate audit logs upon reaching a maximum size, edit the <tt>openshift-kube-apiserver</tt> configmap and set the <tt>audit-log-maxsize</tt> parameter to an appropriate size in MB. For example, to set it to 100 MB: <pre> \"apiServerArguments\":{ ... \"audit-log-maxsize\": [\"100\"], ... </pre>",
            "remarks": "rule_set_010"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_audit_log_path",
            "remarks": "rule_set_011"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To enable auditing on the Kubernetes API Server, the audit log path must be set. Edit the <tt>openshift-kube-apiserver</tt> configmap and set the <tt>audit-log-path</tt> to a suitable path and file where audit logs should be written. For example: <pre> \"apiServerArguments\":{ ... \"audit-log-path\":\"/var/log/kube-apiserver/audit.log\", ... </pre>",
            "remarks": "rule_set_011"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_auth_mode_no_aa",
            "remarks": "rule_set_012"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Do not always authorize all requests.",
            "remarks": "rule_set_012"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_auth_mode_rbac",
            "remarks": "rule_set_013"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure OpenShift restricts different identities to a defined set of operations they are allowed to perform, check that the API server's <tt>authorization-mode</tt> configuration option list contains RBAC.",
            "remarks": "rule_set_013"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_basic_auth",
            "remarks": "rule_set_014"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Basic Authentication should not be used for any reason. If needed, edit API Edit the <tt>openshift-kube-apiserver</tt> configmap and remove the <tt>basic-auth-file</tt> parameter: <pre> \"apiServerArguments\":{ ... \"basic-auth-file\":[ \"/path/to/any/file\" ], ... </pre> Alternate authentication mechanisms such as tokens and certificates will need to be used. Username and password for basic authentication will be disabled.",
            "remarks": "rule_set_014"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_bind_address",
            "remarks": "rule_set_015"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The bindAddress is set by default to <tt>0.0.0.0:6443</tt>, and listening with TLS enabled.",
            "remarks": "rule_set_015"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_client_ca",
            "remarks": "rule_set_016"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Certificates must be provided to fully setup TLS client certificate authentication. To ensure the API Server utilizes its own TLS certificates, the <tt>clientCA</tt> must be configured. Verify that <tt>servingInfo</tt> has the <tt>clientCA</tt> configured in the <tt>openshift-kube-apiserver</tt> <tt>config</tt> configmap to something similar to: <pre> \"apiServerArguments\": { ... \"client-ca-file\": [ \"/etc/kubernetes/static-pod-certs/configmaps/client-ca/ca-bundle.crt\" ], ... </pre>",
            "remarks": "rule_set_016"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_encryption_provider_cipher",
            "remarks": "rule_set_017"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "<p> When you enable etcd encryption, the following OpenShift API server and Kubernetes API server resources are encrypted: <ul> <li>Secrets</li> <li>ConfigMaps</li> <li>Routes</li> <li>OAuth access tokens</li> <li>OAuth authorize tokens</li> </ul> </p> <p> When you enable etcd encryption, encryption keys are created. These keys are rotated on a weekly basis. You must have these keys in order to restore from an etcd backup. </p> <p> To ensure the correct cipher, set the encryption type to <tt>aescbc</tt> or <tt>aesgcm</tt> in the <tt>apiserver</tt> object which configures the API server itself. <pre> spec: encryption: type: aescbc </pre> </p> <p> For more information, follow <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/security/encrypting-etcd.html'>the relevant documentation</a>. </p>",
            "remarks": "rule_set_017"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_etcd_ca",
            "remarks": "rule_set_018"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure etcd is configured to make use of TLS encryption for client connections, follow the OpenShift documentation and setup the TLS connection between the API Server and etcd. Then, verify that <tt>apiServerArguments</tt> has the <tt>etcd-cafile</tt> configured in the <tt>openshift-kube-apiserver</tt> <tt>config</tt> configmap to something similar to: <pre> \"apiServerArguments\": { ... \"etcd-cafile\": [ \"/etc/kubernetes/static-pod-resources/configmaps/etcd-serving-ca/ca-bundle.crt\" ], ... </pre>",
            "remarks": "rule_set_018"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_etcd_cert",
            "remarks": "rule_set_019"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure etcd is configured to make use of TLS encryption for client communications, follow the OpenShift documentation and setup the TLS connection between the API Server and etcd. Then, verify that <tt>apiServerArguments</tt> has the <tt>etcd-certfile</tt> configured in the <tt>openshift-kube-apiserver</tt> configmap to something similar to: <pre> ... \"etcd-certfile\": [ \"/etc/kubernetes/static-pod-resources/secrets/etcd-client/tls.crt\" ], ... </pre>",
            "remarks": "rule_set_019"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_etcd_key",
            "remarks": "rule_set_020"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure etcd is configured to make use of TLS encryption for client communications, follow the OpenShift documentation and setup the TLS connection between the API Server and etcd. Then, verify that <tt>apiServerArguments</tt> has the <tt>etcd-keyfile</tt> configured in the <tt>openshift-kube-apiserver</tt> configmap to something similar to: <pre> ... \"etcd-keyfile\": [ \"/etc/kubernetes/static-pod-resources/secrets/etcd-client/tls.key\" ], ... </pre>",
            "remarks": "rule_set_020"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_https_for_kubelet_conn",
            "remarks": "rule_set_021"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The kube-apiserver ensures https to the kubelet by default. The apiserver flag \"--kubelet-https\" is deprecated and should be either set to \"true\" or omitted from the argument list.",
            "remarks": "rule_set_021"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_insecure_bind_address",
            "remarks": "rule_set_022"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "OpenShift should not bind to non-loopback insecure addresses. Edit the <tt>openshift-kube-apiserver</tt> configmap and remove the <tt>insecure-bind-address</tt> if it exists: <pre> \"apiServerArguments\":{ ... \"insecure-bind-address\":[ \"127.0.0.1\" ], ... </pre>",
            "remarks": "rule_set_022"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_kubelet_certificate_authority",
            "remarks": "rule_set_023"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure OpenShift verifies kubelet certificates before establishing connections, follow the OpenShift documentation and setup the TLS connection between the API Server and kubelets. Edit the <tt>openshift-kube-apiserver</tt> configmap and set the below parameter if it is not already configured: <pre> \"apiServerArguments\":{ ... \"kubelet-certificate-authority\":\"/etc/kubernetes/static-pod-resources/configmaps/kubelet-serving-ca/ca-bundle.crt\", ... </pre>",
            "remarks": "rule_set_023"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_kubelet_client_cert",
            "remarks": "rule_set_024"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To enable certificate based kubelet authentication, edit the <tt>config</tt> configmap in the <tt>openshift-kube-apiserver</tt> namespace and set the below parameter in the <tt>config.yaml</tt> key if it is not already configured: <pre> \"apiServerArguments\":{ ... \"kubelet-client-certificate\":\"/etc/kubernetes/static-pod-resources/secrets/kubelet-client/tls.crt\", ... } </pre>",
            "remarks": "rule_set_024"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_kubelet_client_cert_pre_4_9",
            "remarks": "rule_set_025"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To enable certificate based kubelet authentication, edit the <tt>config</tt> configmap in the <tt>openshift-kube-apiserver</tt> namespace and set the below parameter in the <tt>config.yaml</tt> key if it is not already configured: <pre> \"apiServerArguments\":{ ... \"kubelet-client-certificate\":\"/etc/kubernetes/static-pod-resources/secrets/kubelet-client/tls.crt\", ... } </pre> <pre> Note that this particular rule is only valid for OCP releases up to and including 4.8 </pre>",
            "remarks": "rule_set_025"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_kubelet_client_key",
            "remarks": "rule_set_026"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To enable certificate based kubelet authentication, edit the <tt>config</tt> configmap in the <tt>openshift-kube-apiserver</tt> namespace and set the below parameter in the <tt>config.yaml</tt> key if it is not already configured: <pre> \"apiServerArguments\":{ ... \"kubelet-client-key\":\"/etc/kubernetes/static-pod-resources/secrets/kubelet-client/tls.key\", ... } </pre>",
            "remarks": "rule_set_026"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_kubelet_client_key_pre_4_9",
            "remarks": "rule_set_027"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To enable certificate based kubelet authentication, edit the <tt>config</tt> configmap in the <tt>openshift-kube-apiserver</tt> namespace and set the below parameter in the <tt>config.yaml</tt> key if it is not already configured: <pre> \"apiServerArguments\":{ ... \"kubelet-client-key\":\"/etc/kubernetes/static-pod-resources/secrets/kubelet-client/tls.key\", ... } </pre> <pre> Note that this particular rule is only valid for OCP releases up to and including 4.8 </pre>",
            "remarks": "rule_set_027"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_oauth_https_serving_cert",
            "remarks": "rule_set_028"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "By default, the OpenShift OAuth API Server uses TLS. HTTPS should be used for connections between openshift-oauth-apiserver and kube-apiserver. By default, the OpenShift OAuth API Server uses Intermediate profile which requires a minimum TLS version of 1.2.",
            "remarks": "rule_set_028"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_openshift_https_serving_cert",
            "remarks": "rule_set_029"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "By default, the OpenShift API Server uses TLS. HTTPS should be used for connections between openshift-apiserver and kube-apiserver. By default, the OpenShift OAuth API Server uses Intermediate profile which requires a minimum TLS version of 1.2.",
            "remarks": "rule_set_029"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_profiling_protected_by_rbac",
            "remarks": "rule_set_030"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Ensure that the cluster-debugger cluster role includes the /metrics resource URL. This demonstrates that profiling is protected by RBAC, with a specific cluster role to allow access.",
            "remarks": "rule_set_030"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_request_timeout",
            "remarks": "rule_set_031"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The API server minimum request timeout defines the minimum number of seconds a handler must keep a request open before timing it out. To set this, edit the <tt>openshift-kube-apiserver</tt> configmap and set <tt>min-request-timeout</tt> under the <tt>apiServerArguments</tt> field: <pre> \"apiServerArguments\":{ ... \"min-request-timeout\":[ <sub idref=\"var_api_min_request_timeout\" /> ], ... </pre>",
            "remarks": "rule_set_031"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_service_account_lookup",
            "remarks": "rule_set_032"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Validate service account before validating token.",
            "remarks": "rule_set_032"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_service_account_public_key",
            "remarks": "rule_set_033"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the API Server utilizes its own key pair, edit the <tt>openshift-kube-apiserver</tt> configmap and set the <tt>serviceAccountPublicKeyFiles</tt> parameter to the public key file for service accounts: <pre> ... \"serviceAccountPublicKeyFiles\":[ \"/etc/kubernetes/static-pod-resources/configmaps/sa-token-signing-certs\" ], ... </pre>",
            "remarks": "rule_set_033"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_tls_cert",
            "remarks": "rule_set_034"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the API Server utilizes its own TLS certificates, the <tt>tls-cert-file</tt> must be configured. Verify that the <tt>apiServerArguments</tt> section has the <tt>tls-cert-file</tt> configured in the <tt>config</tt> configmap in the <tt>openshift-kube-apiserver</tt> namespace similar to: <pre> \"apiServerArguments\":{ ... \"tls-cert-file\": [ \"/etc/kubernetes/static-pod-certs/secrets/service-network-serving-certkey/tls.crt\" ], ... } </pre>",
            "remarks": "rule_set_034"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_tls_cipher_suites",
            "remarks": "rule_set_035"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure that the API Server is configured to only use strong cryptographic ciphers, verify the <tt>openshift-kube-apiserver</tt> configmap contains the following set of ciphers, with no additions: <pre> \"servingInfo\":{ ... \"cipherSuites\": [ \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\", \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\", \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\", \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\", \"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\", \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\", ], ... </pre>",
            "remarks": "rule_set_035"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_tls_private_key",
            "remarks": "rule_set_036"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the API Server utilizes its own TLS certificates, the <tt>tls-private-key-file</tt> must be configured. Verify that the <tt>apiServerArguments</tt> section has the <tt>tls-private-key-file</tt> configured in the <tt>config</tt> configmap in the <tt>openshift-kube-apiserver</tt> namespace similar to: <pre> \"apiServerArguments\":{ ... \"tls-private-key-file\": [ \"/etc/kubernetes/static-pod-certs/secrets/service-network-serving-certkey/tls.key\" ], ... } </pre>",
            "remarks": "rule_set_036"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "api_server_token_auth",
            "remarks": "rule_set_037"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure OpenShift does not accept token-based authentication, follow the OpenShift documentation and configure alternate mechanisms for authentication. Then, edit the API Server pod specification file Edit the <tt>openshift-kube-apiserver</tt> configmap and remove the <tt>token-auth-file</tt> parameter: <pre> \"apiServerArguments\":{ ... \"token-auth-file\":[ \"/path/to/any/file\" ], ... </pre>",
            "remarks": "rule_set_037"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "audit_log_forwarding_enabled",
            "remarks": "rule_set_038"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "OpenShift audit works at the API server level, logging all requests coming to the server. Audit is on by default and the best practice is to ship audit logs off the cluster for retention. The cluster-logging-operator is able to do this with the <pre>ClusterLogForwarders</pre> resource. The forementioned resource can be configured to logs to different third party systems. For more information on this, please reference the official documentation: <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/observability/logging/logging-6.0/log6x-clf.html'>https://docs.openshift.com/container-platform/latest/observability/logging/logging-6.0/log6x-clf.html</a>",
            "remarks": "rule_set_038"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "audit_log_forwarding_webhook",
            "remarks": "rule_set_039"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Audit is on by default and the best practice is to ship audit logs off an cluster for retention. HyperShift is able to do this with the a audit webhook, which is configured in the HostedCluster custom resource. The forementioned resource can be configured to log to different third party systems. For more information on this, please reference the official documentation: <a xmlns='http://www.w3.org/1999/xhtml' href='https://hypershift-docs.netlify.app/reference/api/'>https://hypershift-docs.netlify.app/reference/api/</a>",
            "remarks": "rule_set_039"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "audit_logging_enabled",
            "remarks": "rule_set_040"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "OpenShift has the ability to audit API server requests. Audit provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators, or other components of the system. Audit works at the API server level, logging all requests coming to the server. Verify that audit logging is enabled by checking that the API server audit log configuration is not set to `None`, which explicitly disables the functionality. For more information on how to configure the audit profile, please visit <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/security/audit-log-policy-config.html'>the documentation</a>",
            "remarks": "rule_set_040"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "audit_profile_set",
            "remarks": "rule_set_041"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "<p> OpenShift can audit the details of requests made to the API server through the standard Kubernetes audit capabilities. </p> <p> In OpenShift, auditing of the API Server is on by default. Audit provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators, or other components of the system. Audit works at the API server level, logging all requests coming to the server. Each audit log contains two entries: </p> <p> The request line containing: </p> <ul> <li>A Unique ID allowing to match the response line (see #2)</li> <li>The source IP of the request</li> <li>The HTTP method being invoked</li> <li>The original user invoking the operation</li> <li>The impersonated user for the operation (self meaning himself)</li> <li>The impersonated group for the operation (lookup meaning user's group)</li> <li>The namespace of the request or none</li> <li>The URI as requested</li> </ul> <p> The response line containing: </p> <ul> <li>The aforementioned unique ID</li> <li>The response code</li> </ul> <p> For more information on how to configure the audit profile, please visit <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/security/audit-log-policy-config.html'>the documentation</a> </p>",
            "remarks": "rule_set_041"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "configure_network_policies",
            "remarks": "rule_set_042"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "There are a variety of CNI plugins available for Kubernetes. If the CNI in use does not support Network Policies it may not be possible to effectively restrict traffic in the cluster. OpenShift supports Kubernetes NetworkPolicy using a Kubernetes Container Network Interface (CNI) plug-in.",
            "remarks": "rule_set_042"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "configure_network_policies_hypershift_hosted",
            "remarks": "rule_set_043"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Use network policies to isolate traffic in your cluster network.",
            "remarks": "rule_set_043"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "configure_network_policies_namespaces",
            "remarks": "rule_set_044"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Use network policies to isolate traffic in your cluster network.",
            "remarks": "rule_set_044"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "controller_insecure_port_disabled",
            "remarks": "rule_set_045"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the Controller Manager service is bound to secure loopback address and a secure port, set the <tt>RotateKubeletServerCertificate</tt> option to <tt>true</tt> in the <tt>openshift-kube-controller-manager</tt> configmap on the master node(s): <pre> \"extendedArguments\": { ... \"port\": [\"0\"], ... </pre> It is also acceptable for a system to deprecate the insecure port: <pre> \"extendedArguments\": { ... ... </pre>",
            "remarks": "rule_set_045"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "controller_secure_port",
            "remarks": "rule_set_046"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the Controller Manager service is bound to secure loopback address using a secure port, set the <tt>RotateKubeletServerCertificate</tt> option to <tt>true</tt> in the <tt>openshift-kube-controller-manager</tt> configmap on the master node(s): <pre> \"extendedArguments\": { ... \"secure-port\": [\"10257\"], ... </pre>",
            "remarks": "rule_set_046"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "controller_service_account_ca",
            "remarks": "rule_set_047"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the API Server utilizes its own key pair, set the <tt>masterCA</tt> parameter to the public key file for service accounts in the <tt>openshift-kube-controller-manager</tt> configmap on the master node(s): <pre> \"extendedArguments\": { ... \"root-ca-file\": [ \"/etc/kubernetes/static-pod-resources/configmaps/serviceaccount-ca/ca-bundle.crt\" ], ... </pre>",
            "remarks": "rule_set_047"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "controller_service_account_private_key",
            "remarks": "rule_set_048"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the API Server utilizes its own key pair, set the <tt>privateKeyFile</tt> parameter to the public key file for service accounts in the <tt>openshift-kube-controller-manager</tt> configmap on the master node(s): <pre> \"extendedArguments\": { ... \"service-account-private-key-file\": [ \"/etc/kubernetes/static-pod-resources/secrets/service-account-private-key/service-account.key\" ], ... </pre>",
            "remarks": "rule_set_048"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "controller_use_service_account",
            "remarks": "rule_set_049"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure individual service account credentials are used, set the <tt>use-service-account-credentials</tt> option to <tt>true</tt> in the <tt>openshift-kube-controller-manager</tt> configmap on the master node(s): <pre> \"extendedArguments\": { ... \"use-service-account-credentials\": [ \"true\" ], ... </pre>",
            "remarks": "rule_set_049"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_auto_tls",
            "remarks": "rule_set_050"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the <tt>etcd</tt> service is not using self-signed certificates, run the following command: <pre>$ oc get cm/etcd-pod -n openshift-etcd -o yaml</pre> The etcd pod configuration contained in the configmap should not contain the <tt>--auto-tls=true</tt> flag.",
            "remarks": "rule_set_050"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_cert_file",
            "remarks": "rule_set_051"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the etcd service is serving TLS to clients, make sure the <tt>etcd-pod*</tt> ConfigMaps in the <tt>openshift-etcd</tt> namespace contain the following argument for the <tt>etcd</tt> binary in the <tt>etcd</tt> pod: <pre>--cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-serving-NODE_NAME.crt</pre>. Note that the <pre>[a-z]+</pre> is being used since the directory might change between OpenShift versions.",
            "remarks": "rule_set_051"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_client_cert_auth",
            "remarks": "rule_set_052"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the <tt>etcd</tt> service is serving TLS to clients, make sure the <tt>etcd-pod*</tt> <tt>ConfigMaps</tt> in the <tt>openshift-etcd</tt> namespace contain the following argument for the <tt>etcd</tt> binary in the <tt>etcd</tt> pod: <pre>oc get -nopenshift-etcd cm etcd-pod -oyaml | grep \"\\-\\-client-cert-auth=\"</pre> the parameter should be set to <tt>true</tt>.",
            "remarks": "rule_set_052"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_key_file",
            "remarks": "rule_set_053"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the etcd service is serving TLS to clients, make sure the <tt>etcd-pod*</tt> ConfigMaps in the <tt>openshift-etcd</tt> namespace contain the following argument for the <tt>etcd</tt> binary in the <tt>etcd</tt> pod: <pre>oc get -nopenshift-etcd cm etcd-pod -oyaml | grep \"\\-\\-key-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-serving-NODE_NAME.key\"</pre>. Note that the <pre>[a-z]+</pre> is being used since the directory might change between OpenShift versions.",
            "remarks": "rule_set_053"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_peer_auto_tls",
            "remarks": "rule_set_054"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the <tt>etcd</tt> service is not using self-signed certificates, run the following command: <pre>$ oc get cm/etcd-pod -n openshift-etcd -o yaml</pre> The etcd pod configuration contained in the configmap should not contain the <tt>--peer-auto-tls=true</tt> flag.",
            "remarks": "rule_set_054"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_peer_cert_file",
            "remarks": "rule_set_055"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the etcd service is serving TLS to peers, make sure the <tt>etcd-pod*</tt> ConfigMaps in the <tt>openshift-etcd</tt> namespace contain the following argument for the <tt>etcd</tt> binary in the <tt>etcd</tt> pod: <pre>--peer-cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-peer-NODE_NAME.crt</pre> Note that the <pre>[a-z]+</pre> is being used since the directory might change between OpenShift versions.",
            "remarks": "rule_set_055"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_peer_client_cert_auth",
            "remarks": "rule_set_056"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the <tt>etcd</tt> service is serving TLS to clients, make sure the <tt>etcd-pod*</tt> <tt>ConfigMaps</tt> in the <tt>openshift-etcd</tt> namespace contain the following argument for the <tt>etcd</tt> binary in the <tt>etcd</tt> pod: <pre>oc get -nopenshift-etcd cm etcd-pod -oyaml | grep \"\\-\\-peer-client-cert-auth=\"</pre> the parameter should be set to <tt>true</tt>.",
            "remarks": "rule_set_056"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "etcd_peer_key_file",
            "remarks": "rule_set_057"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the etcd service is serving TLS to peers, make sure the <tt>etcd-pod*</tt> ConfigMaps in the <tt>openshift-etcd</tt> namespace contain the following argument for the <tt>etcd</tt> binary in the <tt>etcd</tt> pod: <pre>oc get -nopenshift-etcd cm etcd-pod -oyaml | grep \"\\-\\-peer-key-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-peer-NODE_NAME.key\"</pre> Note that the <pre>[a-z]+</pre> is being used since the directory might change between OpenShift versions.",
            "remarks": "rule_set_057"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "file_groupowner_proxy_kubeconfig",
            "remarks": "rule_set_058"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the Kubernetes ConfigMap is mounted into the sdn daemonset pods with the correct ownership, make sure that the <tt>sdn-config</tt> ConfigMap is mounted using a ConfigMap at the <tt>/config</tt> mount point and that the <tt>sdn</tt> container points to that configuration using the <tt>--proxy-config</tt> command line option. Run: <pre> oc get -nopenshift-sdn ds sdn -ojson | jq -r '.spec.template.spec.containers[] | select(.name == \"sdn\")'</pre> and ensure the <tt>--proxy-config</tt> parameter points to <tt>/config/kube-proxy-config.yaml</tt> and that the <tt>config</tt> mount point is mounted from the <tt>sdn-config</tt> ConfigMap.",
            "remarks": "rule_set_058"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "file_owner_proxy_kubeconfig",
            "remarks": "rule_set_059"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the Kubernetes ConfigMap is mounted into the sdn daemonset pods with the correct ownership, make sure that the <tt>sdn-config</tt> ConfigMap is mounted using a ConfigMap at the <tt>/config</tt> mount point and that the <tt>sdn</tt> container points to that configuration using the <tt>--proxy-config</tt> command line option. Run: <pre> oc get -nopenshift-sdn ds sdn -ojson | jq -r '.spec.template.spec.containers[] | select(.name == \"sdn\")'</pre> and ensure the <tt>--proxy-config</tt> parameter points to <tt>/config/kube-proxy-config.yaml</tt> and that the <tt>config</tt> mount point is mounted from the <tt>sdn-config</tt> ConfigMap.",
            "remarks": "rule_set_059"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "file_permissions_proxy_kubeconfig",
            "remarks": "rule_set_060"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the Kubernetes ConfigMap is mounted into the sdn daemonset pods with the correct permissions, make sure that the <tt>sdn-config</tt> ConfigMap is mounted using restrictive permissions. Check that the <tt>config</tt> VolumeMount mounts the <tt>sdn-config</tt> configMap with permissions set to 420: <pre> { \"configMap\": { \"defaultMode\": 420, \"name\": \"sdn-config\" }, \"name\": \"config\" } </pre>",
            "remarks": "rule_set_060"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "general_apply_scc",
            "remarks": "rule_set_061"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Apply Security Context to your Pods and Containers",
            "remarks": "rule_set_061"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "general_default_namespace_use",
            "remarks": "rule_set_062"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.",
            "remarks": "rule_set_062"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "general_default_seccomp_profile",
            "remarks": "rule_set_063"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Enable <tt>default</tt> seccomp profiles in your pod definitions.",
            "remarks": "rule_set_063"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "general_namespaces_in_use",
            "remarks": "rule_set_064"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Use namespaces to isolate your Kubernetes objects.",
            "remarks": "rule_set_064"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "idp_is_configured",
            "remarks": "rule_set_065"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "<p> For users to interact with OpenShift Container Platform, they must first authenticate to the cluster. The authentication layer identifies the user associated with requests to the OpenShift Container Platform API. The authorization layer then uses information about the requesting user to determine if the request is allowed. <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/4.6/logging/cluster-logging-external.html'>Understanding authentication | Authentication | OpenShift Container Platform</a> </p> <p> The OpenShift Container Platform includes a built-in OAuth server for token-based authentication. Developers and administrators obtain OAuth access tokens to authenticate themselves to the API. It is recommended for an administrator to configure OAuth to specify an identity provider after the cluster is installed. User access to the cluster is managed through the identity provider. <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/4.6/authentication/understanding-identity-provider.html'>Understanding identity provider configuration | Authentication | OpenShift Container Platform</a> </p> <p> OpenShift includes built-in role based access control (RBAC) to determine whether a user is allowed to perform a given action within the cluster. Roles can have cluster scope or local (i.e. project) scope. <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/4.6/authentication/using-rbac.html'>Using RBAC to define and apply permissions | Authentication | OpenShift Container Platform</a> </p>",
            "remarks": "rule_set_065"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "kubeadmin_removed",
            "remarks": "rule_set_066"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The kubeadmin user is meant to be a temporary user used for bootstrapping purposes. It is preferable to assign system administrators whose users are backed by an Identity Provider. <br /> Make sure to remove the user as <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/authentication/remove-kubeadmin.html'>described in the documentation</a>",
            "remarks": "rule_set_066"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "kubelet_configure_tls_cert",
            "remarks": "rule_set_067"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the kubelet TLS client certificate is configured, edit the kubelet configuration file <tt>/etc/kubernetes/kubelet.conf</tt> and configure the kubelet certificate file. <pre>tlsCertFile: /path/to/TLS/cert.key</pre>",
            "remarks": "rule_set_067"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "kubelet_configure_tls_cipher_suites_ingresscontroller",
            "remarks": "rule_set_068"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Ensure that the Ingress Controller is configured to only use strong cryptographic ciphers.",
            "remarks": "rule_set_068"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "kubelet_configure_tls_key",
            "remarks": "rule_set_069"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To ensure the kubelet TLS private server key certificate is configured, edit the kubelet configuration file <tt>/etc/kubernetes/kubelet.conf</tt> and configure the kubelet private key file. <pre>tlsPrivateKeyFile: /path/to/TLS/private.key</pre>",
            "remarks": "rule_set_069"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "kubelet_disable_readonly_port",
            "remarks": "rule_set_070"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To disable the read-only port, edit the kubelet configuration Edit the <tt>openshift-kube-apiserver</tt> configmap and set the <tt>kubelet-read-only-port</tt> parameter to 0: <pre> \"apiServerArguments\":{ ... \"kubelet-read-only-port\":[ \"0\" ], ... </pre>",
            "remarks": "rule_set_070"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "ocp_allowed_registries",
            "remarks": "rule_set_071"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The configuration <tt>registrySources.allowedRegistries</tt> determines the permitted registries that the OpenShift container runtime can access for builds and pods. This configuration setting ensures that all registries other than those specified are blocked. You can set the allowed repositories by applying the following manifest using <pre>oc patch</pre>, e.g. if you save the following snippet to <pre>/tmp/allowed-registries-patch.yaml</pre> <pre> spec: registrySources: allowedRegistries: - my-trusted-registry.internal.example.com </pre> you would call <pre>oc patch image.config.openshift.io cluster --patch=\"$(cat /tmp/allowed-registries-patch.yaml)\" --type=merge</pre>",
            "remarks": "rule_set_071"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "ocp_allowed_registries_for_import",
            "remarks": "rule_set_072"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The configuration <tt>allowedRegistriesForImport</tt> limits the container image registries from which normal users may import images. This is important to control, as a user who can stand up a malicious registry can then import content which claims to include the SHAs of legitimate content layers. You can set the allowed repositories for import by applying the following manifest using <pre>oc patch</pre>, e.g. if you save the following snippet to <pre>/tmp/allowed-import-registries-patch.yaml</pre> <pre> spec: allowedRegistriesForImport: - domainName: my-trusted-registry.internal.example.com insecure: false </pre> you would call <pre>oc patch image.config.openshift.io cluster --patch=\"$(cat /tmp/allowed-import-registries-patch.yaml)\" --type=merge</pre>",
            "remarks": "rule_set_072"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "ocp_api_server_audit_log_maxbackup",
            "remarks": "rule_set_073"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To configure how many rotations of audit logs are retained, edit the <tt>openshift-apiserver</tt> configmap and set the <tt>audit-log-maxbackup</tt> parameter to <tt>10</tt> or to an organizationally appropriate value: <pre> \"apiServerArguments\":{ ... \"audit-log-maxbackup\": [10], ... </pre>",
            "remarks": "rule_set_073"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "ocp_api_server_audit_log_maxsize",
            "remarks": "rule_set_074"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To rotate audit logs upon reaching a maximum size, edit the <tt>openshift-apiserver</tt> configmap and set the <tt>audit-log-maxsize</tt> parameter to an appropriate size in MB. For example, to set it to 100 MB: <pre> \"apiServerArguments\":{ ... \"audit-log-maxsize\": [\"100\"], ... </pre>",
            "remarks": "rule_set_074"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "ocp_insecure_allowed_registries_for_import",
            "remarks": "rule_set_075"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The configuration <tt>allowedRegistriesForImport</tt> limits the container image registries from which normal users may import images. This is a list of the registries that can be trusted to contain valid images and the image location configured is assumed to be secured unless configured otherwise. It is important to allow only secure registries to avoid man in the middle attacks, as the insecure image import request can be impersonated and could lead to fetching malicious content. List all the allowed repositories for import configured with insecure set to true using the following command: <pre>oc get image.config.openshift.io/cluster -o json | jq '.spec | (.allowedRegistriesForImport[])? | select(.insecure==true)'</pre> Remove or edit the listed registries having insecure set by using the command: <pre>oc edit image.config.openshift.io/cluster</pre> For more information, follow <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/openshift_images/image-configuration.html'>the relevant documentation</a>.",
            "remarks": "rule_set_075"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "ocp_insecure_registries",
            "remarks": "rule_set_076"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The configuration <tt>registrySources.insecureRegistries</tt> determines the insecure registries that the OpenShift container runtime can access for builds and pods. This configuration setting is for accessing the configured registries without TLS validation which could lead to security breaches and should be avoided. Remove any insecureRegistries configured using the following command: <pre>oc patch image.config.openshift.io cluster --type=json -p \"[{'op': 'remove', 'path': '/spec/registrySources/insecureRegistries'}]\"</pre> For more information, follow <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/openshift_images/image-configuration.html'>the relevant documentation</a>.",
            "remarks": "rule_set_076"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "openshift_api_server_audit_log_path",
            "remarks": "rule_set_077"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "To enable auditing on the OpenShift API Server, the audit log path must be set. Edit the <tt>openshift-apiserver</tt> configmap and set the <tt>audit-log-path</tt> to a suitable path and file where audit logs should be written. For example: <pre> \"apiServerArguments\":{ ... \"audit-log-path\":\"/var/log/openshift-apiserver/audit.log\", ... </pre>",
            "remarks": "rule_set_077"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "rbac_debug_role_protects_pprof",
            "remarks": "rule_set_078"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Ensure that the cluster-debugger cluster role includes the /debug/pprof resource URL. This demonstrates that profiling is protected by RBAC, with a specific cluster role to allow access.",
            "remarks": "rule_set_078"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "rbac_least_privilege",
            "remarks": "rule_set_079"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Role-based access control (RBAC) objects determine whether a user is allowed to perform a given action within a project. If users or groups exist that are bound to roles they must not have, modify the user or group permissions using the following cluster and local role binding commands: Remove a User from a Cluster RBAC role by executing the following: oc adm policy remove-cluster-role-from-user role username Remove a Group from a Cluster RBAC role by executing the following: oc adm policy remove-cluster-role-from-group role groupname Remove a User from a Local RBAC role by executing the following: oc adm policy remove-role-from-user role username Remove a Group from a Local RBAC role by executing the following: oc adm policy remove-role-from-group role groupname NOTE: For additional information. https://docs.openshift.com/container-platform/latest/authentication/using-rbac.html",
            "remarks": "rule_set_079"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "rbac_limit_cluster_admin",
            "remarks": "rule_set_080"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.",
            "remarks": "rule_set_080"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "rbac_limit_secrets_access",
            "remarks": "rule_set_081"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The Kubernetes API stores secrets, which may be service account tokens for the Kubernetes API or credentials used by workloads in the cluster. Access to these secrets should be restricted to the smallest possible group of users to reduce the risk of privilege escalation. To restrict users from secrets, remove <tt>get</tt>, <tt>list</tt>, and <tt>watch</tt> access to unauthorized users to secret objects in the cluster.",
            "remarks": "rule_set_081"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "rbac_pod_creation_access",
            "remarks": "rule_set_082"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "The ability to create pods in a namespace can provide a number of opportunities for privilege escalation. Where applicable, remove <tt>create</tt> access to <tt>pod</tt> objects in the cluster.",
            "remarks": "rule_set_082"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "rbac_wildcard_use",
            "remarks": "rule_set_083"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Kubernetes Cluster and Local Roles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these using a wildcard <tt>*</tt> which matches all items. This violates the principle of least privilege and leaves a cluster in a more vulnerable state to privilege abuse.",
            "remarks": "rule_set_083"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_drop_container_capabilities",
            "remarks": "rule_set_084"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should not enable more capabilities than needed as this opens the door for malicious use. To disable the capabilities, the appropriate Security Context Constraints (SCCs) should set all capabilities as <tt>*</tt> or a list of capabilities in <tt>requiredDropCapabilities</tt>.",
            "remarks": "rule_set_084"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_container_allowed_capabilities",
            "remarks": "rule_set_085"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "<p> Containers should not enable more capabilites than needed as this opens the door for malicious use. To enable only the required capabilities, the appropriate Security Context Constraints (SCCs) should set capabilities as a list in <tt>allowedCapabilities</tt>. </p> <p> In case an SCC outside the default allow list in the variable <tt>var-sccs-with-allowed-capabilities-regex</tt> is being flagged, create a <tt>TailoredProfile</tt> and add the additional SCC to the regular expression in the variable <tt>var-sccs-with-allowed-capabilities-regex</tt>. An example allowing an SCC named <tt>additional</tt> follows: </p> <pre> apiVersion: compliance.openshift.io/v1alpha1 kind: TailoredProfile metadata: name: cis-additional-scc spec: description: Allows an additional scc setValues: - name: ocp4-var-sccs-with-allowed-capabilities-regex rationale: Allow our own custom SCC value: ^privileged$|^hostnetwork-v2$|^restricted-v2$|^nonroot-v2$|^additional$ extends: ocp4-cis title: Modified CIS allowing one more SCC </pre> <p> Finally, reference this <tt>TailoredProfile</tt> in a <tt>ScanSettingBinding</tt> For more information on Tailoring the Compliance Operator, please consult the OpenShift documentation: <a xmlns='http://www.w3.org/1999/xhtml' href='https://docs.openshift.com/container-platform/latest/security/compliance_operator/co-scans/compliance-operator-tailor.html'>https://docs.openshift.com/container-platform/latest/security/compliance_operator/co-scans/compliance-operator-tailor.html</a> </p>",
            "remarks": "rule_set_085"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_ipc_namespace",
            "remarks": "rule_set_086"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should not be allowed access to the host's Interprocess Communication (IPC) namespace. To prevent containers from getting access to a host's IPC namespace, the appropriate Security Context Constraints (SCCs) should set <tt>allowHostIPC</tt> to <tt>false</tt>.",
            "remarks": "rule_set_086"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_net_raw_capability",
            "remarks": "rule_set_087"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should not enable more capabilities than needed as this opens the door for malicious use. <tt>CAP_NET_RAW</tt> enables a container to launch a network attack on another container or cluster. To disable the <tt>CAP_NET_RAW</tt> capability, the appropriate Security Context Constraints (SCCs) should set <tt>NET_RAW</tt> in <tt>requiredDropCapabilities</tt>.",
            "remarks": "rule_set_087"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_network_namespace",
            "remarks": "rule_set_088"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should not be allowed access to the host's network namespace. To prevent containers from getting access to a host's network namespace, the appropriate Security Context Constraints (SCCs) should set <tt>allowHostNetwork</tt> to <tt>false</tt>.",
            "remarks": "rule_set_088"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_privilege_escalation",
            "remarks": "rule_set_089"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should be limited to only the privileges required to run and should not be allowed to escalate their privileges. To prevent containers from escalating privileges, the appropriate Security Context Constraints (SCCs) should set <tt>allowPrivilegeEscalation</tt> to <tt>false</tt>.",
            "remarks": "rule_set_089"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_privileged_containers",
            "remarks": "rule_set_090"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should be limited to only the privileges required to run. To prevent containers from running as privileged containers, the appropriate Security Context Constraints (SCCs) should set <tt>allowPrivilegedContainer</tt> to <tt>false</tt>.",
            "remarks": "rule_set_090"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_process_id_namespace",
            "remarks": "rule_set_091"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should not be allowed access to the host's process ID namespace. To prevent containers from getting access to a host's process ID namespace, the appropriate Security Context Constraints (SCCs) should set <tt>allowHostPID</tt> to <tt>false</tt>.",
            "remarks": "rule_set_091"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scc_limit_root_containers",
            "remarks": "rule_set_092"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Containers should run as a random non-privileged user. To prevent containers from running as root user, the appropriate Security Context Constraints (SCCs) should set <tt>.runAsUser.type</tt> to <tt>MustRunAsRange</tt>.",
            "remarks": "rule_set_092"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scheduler_profiling_protected_by_rbac",
            "remarks": "rule_set_093"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Do not bind the scheduler service to non-loopback insecure addresses.",
            "remarks": "rule_set_093"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "scheduler_service_protected_by_rbac",
            "remarks": "rule_set_094"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Do not bind the scheduler service to non-loopback insecure addresses.",
            "remarks": "rule_set_094"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "secrets_consider_external_storage",
            "remarks": "rule_set_095"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Consider the use of an external secrets storage and management system, instead of using Kubernetes Secrets directly, if you have more complex secret management needs. Ensure the solution requires authentication to access secrets, has auditing of access to and use of secrets, and encrypts secrets. Some solutions also make it easier to rotate secrets.",
            "remarks": "rule_set_095"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "secrets_no_environment_variables",
            "remarks": "rule_set_096"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "Secrets should be mounted as data volumes instead of environment variables.",
            "remarks": "rule_set_096"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "version_detect_in_hypershift",
            "remarks": "rule_set_097"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "no description",
            "remarks": "rule_set_097"
          },
          {
            "name": "Rule_Id",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "version_detect_in_ocp",
            "remarks": "rule_set_098"
          },
          {
            "name": "Rule_Description",
            "ns": "https://oscal-compass.github.io/compliance-trestle/schemas/oscal/cd",
            "value": "no description",
            "remarks": "rule_set_098"
          }
        ]
      }
    ]
  }
}